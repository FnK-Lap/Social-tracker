{% extends "SocialTrackerApplicationBundle::layout.html.twig" %}

{% block title %}Se connecter{% endblock %}

{% block content %}
    <form class="form" action="" method="post">

        {% for flashMessage in app.session.flashbag.get('error') %}
            <div class="alert alert-danger alert-dismissible" role="alert">
                <button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                {{ flashMessage }}
            </div>
        {% endfor %}
        
        <span class="input input--kyo">
            <input class="input__field input__field--kyo letter-spacing-10" type="number" id="input-19" name="_auth_code">
            <label class="input__label input__label--kyo" for="input-19">
                <span class="input__label-content input__label-content--kyo">Code</span>
            </label>
        </span>
        
        <p class="submit text-center">
            <a class='btn btn-danger' href="{{ path("logout") }}">Cancel</a>
            <input class='btn btn-info' type="submit" value="Valider" />
        </p>
            <p class="cancel">
        </p>

{% endblock %}

{% block script %}
    <script src="/assets/js/tools/classie.js"></script>
    <script>
        (function() {
            // trim polyfill : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim
            if (!String.prototype.trim) {
                (function() {
                    // Make sure we trim BOM and NBSP
                    var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
                    String.prototype.trim = function() {
                        return this.replace(rtrim, '');
                    };
                })();
            }
            [].slice.call( document.querySelectorAll( 'input.input__field' ) ).forEach( function( inputEl ) {
                // in case the input is already filled..
                if( inputEl.value.trim() !== '' ) {
                    classie.add( inputEl.parentNode, 'input--filled' );
                }
                // events:
                inputEl.addEventListener( 'focus', onInputFocus );
                inputEl.addEventListener( 'blur', onInputBlur );
            } );
            function onInputFocus( ev ) {
                classie.add( ev.target.parentNode, 'input--filled' );
            }
            function onInputBlur( ev ) {
                if( ev.target.value.trim() === '' ) {
                    classie.remove( ev.target.parentNode, 'input--filled' );
                }
            }
        })();
    </script>
{% endblock %}
